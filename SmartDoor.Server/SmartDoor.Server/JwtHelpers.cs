using Dapper;
using Microsoft.Data.Sqlite;
using Microsoft.IdentityModel.Tokens;
using SmartDoor.Server.Models.Database;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;

namespace SmartDoor.Server;

internal static class JwtHelpers
{
    private static readonly SigningCredentials CREDENTIALS = new(new SymmetricSecurityKey(new byte[] {
        0x25, 0xfb, 0xa2, 0x68, 0x1b, 0x39, 0xe8, 0x1e, 0xf4, 0x67, 0x1d, 0x6a, 0xfc, 0x32, 0xff, 0xad,
        0x61, 0xe2, 0xcb, 0xe0, 0xf9, 0xbe, 0xf1, 0xbe, 0x51, 0xb4, 0xa1, 0x71, 0x12, 0xcf, 0xe5, 0xf3,
        0x0f, 0xd0, 0x33, 0x8a, 0xe1, 0xf2, 0x4c, 0xfc, 0x18, 0x76, 0xb8, 0x42, 0xf7, 0x54, 0x30, 0x07,
        0xd0, 0x61, 0xe0, 0x79, 0x27, 0xfa, 0x22, 0x6d, 0x5a, 0x48, 0x48, 0x2b, 0x67, 0x5e, 0x8d, 0x04,
        0x98, 0x9c, 0x9a, 0x41, 0x40, 0x22, 0xe5, 0x0f, 0xbd, 0xbe, 0x14, 0x5b, 0x4b, 0x48, 0x94, 0x9a,
        0xd2, 0x11, 0xf6, 0xcd, 0x05, 0x63, 0xa4, 0x32, 0x3f, 0xc2, 0x88, 0xc1, 0x8e, 0xc0, 0xd6, 0xa5,
        0xe1, 0xd6, 0x55, 0x86, 0xcd, 0x1d, 0x0b, 0x46, 0xba, 0x4c, 0x2b, 0x8e, 0xd8, 0xd9, 0x4e, 0x5b,
        0x12, 0xa1, 0xd4, 0xb6, 0x4e, 0x6d, 0xae, 0xb8, 0x0b, 0x2a, 0xe3, 0x57, 0x30, 0x14, 0x48, 0x79,
        0xca, 0xb6, 0xd1, 0xd7, 0x75, 0x8e, 0x7b, 0x8b, 0x2b, 0x60, 0x71, 0xb8, 0xbb, 0xfd, 0x07, 0x84,
        0x6a, 0x3b, 0x50, 0xe7, 0xdf, 0x49, 0x94, 0x3f, 0x13, 0x32, 0x36, 0xa4, 0x98, 0xc8, 0x0d, 0xa9,
        0x17, 0xab, 0xb2, 0x69, 0x29, 0x64, 0x75, 0x59, 0x82, 0xb0, 0xbe, 0x3c, 0x01, 0xc6, 0x2c, 0xd1,
        0xa1, 0xcf, 0x17, 0xc4, 0x6a, 0x94, 0xad, 0x40, 0x26, 0xf8, 0xf8, 0xea, 0xe8, 0x04, 0x46, 0xf5,
        0x9a, 0x08, 0xe4, 0x38, 0xa5, 0xdc, 0x24, 0x28, 0xdf, 0xc5, 0x7b, 0x2e, 0xea, 0xf6, 0x56, 0x1e,
        0xf2, 0xf7, 0x98, 0x6c, 0x35, 0xde, 0xc7, 0x77, 0x2b, 0x4e, 0x85, 0x97, 0xb1, 0xf7, 0x6c, 0x08,
        0x63, 0xd7, 0x9b, 0xdc, 0x5c, 0xfe, 0x4f, 0x98, 0xc2, 0x4b, 0x0f, 0x5c, 0x2f, 0x2b, 0x88, 0xae,
        0xbc, 0xb4, 0xfb, 0xc4, 0x9c, 0x16, 0x61, 0xba, 0x1c, 0xd0, 0xa4, 0x96, 0xf9, 0x1f, 0x11, 0x78,
    }), SecurityAlgorithms.HmacSha512);

    internal static async Task<bool> ValidateJWT(string? token, HttpContext httpContext)
    {
        if (token is null)
            return false;

        try
        {
            var tokenHandler = new JwtSecurityTokenHandler();
            var validationParameters = new TokenValidationParameters
            {
                ValidateIssuerSigningKey = true,
                ValidateAudience = false,
                ValidateIssuer = false,
                IssuerSigningKey = CREDENTIALS.Key,
                RequireExpirationTime = true,
            };
            var claims = tokenHandler.ValidateToken(token, validationParameters, out var _);

            if (!int.TryParse(claims.FindFirstValue("user"), out var userId))
                return false;

            await using var db = new SqliteConnection("Data Source=SmartDoor.db");
            await db.OpenAsync().ConfigureAwait(false);
            var user = await db.QuerySingleOrDefaultAsync<User>("select * from user where id = @userId", new { userId });
            if (user.Id == 0)
                return false;

            httpContext.SetUser(user);
        }
        catch
        {
            return false;
        }

        return true;
    }


    internal static string GetTokenForUser(User user, TimeSpan? expiry = null)
    {
        expiry ??= TimeSpan.FromDays(1);
        if (expiry.Value.TotalDays > 3)
            expiry = TimeSpan.FromDays(3);

        var token = new JwtSecurityToken(
            claims: new[] {
                new Claim("user", user.Id.ToString())
            },
            expires: DateTime.Now + expiry,
            signingCredentials: CREDENTIALS
        );

        return new JwtSecurityTokenHandler().WriteToken(token);
    }

}

